custom:
  commonResourceStage: ${self:custom.commonResourceStageLookup.${self:provider.stage}, "dev-all"}
  commonResourceStageLookup:
    #dev-<name>: dev-all
    test: test
    prod: prod
  integrationName: '${self:service}-${self:provider.stage}'
functions:
  onDisableExtensionEvent:
    handler: dist/app.onDisableExtensionEventHandler
    name: '${self:custom.integrationName}-onDisableExtensionEvent'
  onEnableExtensionEvent:
    handler: dist/app.onEnableExtensionEventHandler
    name: '${self:custom.integrationName}-onEnableExtensionEvent'
  onUpdateExtensionMerchantEvent:
    handler: dist/app.onUpdateExtensionMerchantEventHandler
    name: '${self:custom.integrationName}-onUpdateExtensionMerchantEvent'
  onUpdateExtensionOrderEvent:
    handler: dist/app.onUpdateExtensionOrderEventHandler
    name: '${self:custom.integrationName}-onUpdateExtensionOrderEvent'
  onWebhookAction:
    handler: dist/app.onWebhookActionHandler
    name: '${self:custom.integrationName}-onWebhookAction'
package:
  exclude:
    - ./**
  include:
    - dist/**
    - serverless.yml
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  deploymentBucket:
    name: '${ssm:/serverless/deployment/bucket/name}'
  environment:
    ACCESS_TOKEN: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/access-token~true}'
    DOMAIN: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/domain}'
    PARTNER_ID: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/partner-id}'
    PASSWORD: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/password~true}'
    SECRET_KEY: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/secret-key~true}'
    USERNAME: '${ssm:/extensions/${self:custom.integrationName}/${self:provider.stage}/username}'
  name: aws
  region: us-west-2
  role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-lambdaRole
  runtime: nodejs12.x
  stackTags:
    luddites.configured-by: protect-sdk-switchboard
    luddites.stage: '${self:provider.stage}'
    luddites.usecase: ${self:custom.integrationName}
  stage: '${opt:stage, env:DEV_NAME}'
  timeout: 30
  versionFunctions: false
stepFunctions:
  stateMachines:
    onDisableExtensionEvent:
      definition:
        StartAt: onDisableExtensionEventStart
        States:
          onDisableExtensionEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onDisableExtensionEvent'
            Type: Task
      name: '${self:custom.integrationName}-onDisableExtensionEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    onEnableExtensionEvent:
      definition:
        StartAt: onEnableExtensionEventStart
        States:
          onEnableExtensionEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onEnableExtensionEvent'
            Type: Task
      name: '${self:custom.integrationName}-onEnableExtensionEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    onUpdateExtensionMerchantEvent:
      definition:
        StartAt: onUpdateExtensionMerchantEventStart
        States:
          onUpdateExtensionMerchantEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onUpdateExtensionMerchantEvent'
            Type: Task
      name: '${self:custom.integrationName}-onUpdateExtensionMerchantEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    onUpdateExtensionOrderEvent:
      definition:
        StartAt: onUpdateExtensionOrderEventStart
        States:
          onUpdateExtensionOrderEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onUpdateExtensionOrderEvent'
            Type: Task
      name: '${self:custom.integrationName}-onUpdateExtensionOrderEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    onWebhookAction:
      definition:
        StartAt: onWebhookActionStart
        States:
          onWebhookActionStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onWebhookAction'
            Type: Task
      name: '${self:custom.integrationName}-onWebhookAction'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
