RetryDefault:
  Retry: &ref_0
    - BackoffRate: 2
      ErrorEquals:
        - States.ALL
      IntervalSeconds: 2
      MaxAttempts: 1
custom:
  integrationName: '${self:service}-${self:provider.stage}'
  alerts:
    stages:
      - test
      - prod
    dashboards: true
    nameTemplate: $[functionName]-$[metricName]-Alarm
    prefixTemplate: $[stackName]
    properties:
      alarmActions:
        - ${self:custom.${self:provider.stage}.pagerDutyArn}
        - ${self:custom.${self:provider.stage}.slackNotificationArn}
      alarmDescription: |
        Error Alarm for Polling Lambda Functions
    definitions:
      functionErrors:
        namespace: 'AWS/Lambda'
        threshold: 1
        statistic: Sum
        period: 300
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanThreshold
      functionDuration:
        namespace: 'AWS/Lambda/Switchboard'
        metric: Duration
        threshold: 2500
        statistic: Maximum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: missing
    alarms:
      - functionErrors
      - functionDuration
functions:
  CreatePolledMessage:
    environment:
      STAGE: '${self:provider.stage}'
    handler: dist/index.createPolledMessage
    name: '${self:custom.integrationName}-createPolledMessage'
  DeletePolledMessage:
    environment:
      STAGE: '${self:provider.stage}'
    handler: dist/index.deletePolledMessage
    name: '${self:custom.integrationName}-deletePolledMessage'
  GetPollUrl:
    environment:
      STAGE: '${self:provider.stage}'
    handler: dist/index.getPollUrl
    name: '${self:custom.integrationName}-getPollUrl'
package:
  exclude:
    - ./**
  include:
    - dist/index.js
    - serverless.yml
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
provider:
  deploymentBucket:
    name: '${ssm:/serverless/deployment/bucket/name}'
  iamRoleStatements:
    - Action: 's3:GetObject'
      Effect: Allow
      Resource: 'arn:aws:s3:::protect-api-switch-data-${self:provider.stage}/*'
      # Full access to queues with names that start with ${self:provider.stage}
    - Action: 'sqs:*'
      Effect: Allow
      Resource: 'arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-*'
    - Action: 'sts:AssumeRole'
      Effect: Allow
      Resource: 'arn:aws:iam::#{AWS::AccountId}:role/${self:custom.integrationName}-#{AWS::Region}-lambdaRole'
      # sqs:ListQueues to all queues in region (can't restrict to specific queues)
    - Action: 'sqs:ListQueues'
      Effect: Allow
      Resource: 'arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:*'
  name: aws
  region: us-west-2
  runtime: nodejs12.x
  stage: '${opt:stage}'
  timeout: 29
  versionFunctions: false
  stackTags:
    'ns8.configured-by': protect-sdk-switchboard
    'ns8.usecase': protect-sdk-switchboard
    'ns8.stage': ${self:provider.stage}

service: protect-switchboard-sdk