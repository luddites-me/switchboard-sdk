RetryDefault:
  Retry: &ref_0
    - BackoffRate: 2
      ErrorEquals:
        - States.ALL
      IntervalSeconds: 2
      MaxAttempts: 1
custom:
  integrationName: '${self:service}-${self:provider.stage}'
  test:
    pagerDutyArn: arn:aws:sns:us-west-2:244249143763:pager_duty
  prod:
    pagerDutyArn: arn:aws:sns:us-west-2:529464811624:ns8_alerts
  alerts:
    stages:
      - test
      - prod
    dashboards: true
    nameTemplate: $[functionName]-$[metricName]-Alarm
    prefixTemplate: $[stackName]
    properties:
      alarmActions:
        - ${self:custom.${self:provider.stage}.pagerDutyArn}
      alarmDescription: |
        Error Alarm for Lambda Functions based on the Switchboard SDK
    definitions:
      functionErrors:
        namespace: 'AWS/Lambda'
        threshold: 1
        statistic: Sum
        period: 300
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanThreshold
      functionDuration:
        namespace: 'AWS/Lambda'
        metric: Duration
        threshold: 6000
        statistic: Maximum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: missing
    alarms:
      - functionErrors
      - functionDuration
  commonResourceStage: ${self:custom.commonResourceStageLookup.${self:provider.stage}, "dev-all"}
  commonResourceStageLookup:
    #dev-<name>: dev-all
    test: test
    prod: prod
functions:
  CreateOrderAction:
    handler: dist/index.CreateOrderAction
    name: '${self:custom.integrationName}-createOrderAction'
  OnInstallEvent:
    handler: dist/index.OnInstallEvent
    name: '${self:custom.integrationName}-onInstallEvent'
  UninstallAction:
    handler: dist/index.UninstallAction
    name: '${self:custom.integrationName}-uninstallAction'
  UpdateCustVerifyStatusEvent:
    handler: dist/index.UpdateCustVerifyStatusEvent
    name: '${self:custom.integrationName}-updateCustVerifyStatusEvent'
  UpdateEQ8ScoreEvent:
    handler: dist/index.UpdateEQ8ScoreEvent
    name: '${self:custom.integrationName}-updateEQ8ScoreEvent'
  UpdateMerchantAction:
    handler: dist/index.UpdateMerchantAction
    name: '${self:custom.integrationName}-updateMerchantAction'
  UpdateOrderRiskEvent:
    handler: dist/index.UpdateOrderRiskEvent
    name: '${self:custom.integrationName}-updateOrderRiskEvent'
  UpdateOrderStatusAction:
    handler: dist/index.UpdateOrderStatusAction
    name: '${self:custom.integrationName}-updateOrderStatusAction'
  UpdateOrderStatusEvent:
    handler: dist/index.UpdateOrderStatusEvent
    name: '${self:custom.integrationName}-updateOrderStatusEvent'
package:
  exclude:
    - ./**
  include:
    - dist/**
    - serverless.yml
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
provider:
  deploymentBucket:
    name: '${ssm:/serverless/deployment/bucket/name}'
  name: aws
  region: us-west-2
  role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-lambdaRole
  runtime: nodejs12.x
  stage: '${opt:stage}'
  timeout: 29
  versionFunctions: false
  stackTags:
    'ns8.configured-by': protect-sdk-switchboard
    'ns8.usecase': ${self:custom.integrationName}
    'ns8.stage': ${self:provider.stage}

stepFunctions:
  stateMachines:
    CreateOrderAction:
      definition:
        StartAt: CreateOrderActionStart
        States:
          CreateOrderActionStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-createOrderAction'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-createOrderAction'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    OnInstallEvent:
      definition:
        StartAt: OnInstallEventStart
        States:
          OnInstallEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-onInstallEvent'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-onInstallEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UninstallAction:
      definition:
        StartAt: UninstallActionStart
        States:
          UninstallActionStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-uninstallAction'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-uninstallAction'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateCustVerifyStatusEvent:
      definition:
        StartAt: UpdateCustVerifyStatusEventStart
        States:
          UpdateCustVerifyStatusEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateCustVerifyStatusEvent'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateCustVerifyStatusEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateEQ8ScoreEvent:
      definition:
        StartAt: UpdateEQ8ScoreEventStart
        States:
          UpdateEQ8ScoreEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateEQ8ScoreEvent'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateEQ8ScoreEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateMerchantAction:
      definition:
        StartAt: UpdateMerchantActionStart
        States:
          UpdateMerchantActionStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateMerchantAction'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateMerchantAction'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateOrderRiskEvent:
      definition:
        StartAt: UpdateOrderRiskEventStart
        States:
          UpdateOrderRiskEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderRiskEvent'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateOrderRiskEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateOrderStatusAction:
      definition:
        StartAt: UpdateOrderStatusActionStart
        States:
          UpdateOrderStatusActionStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderStatusAction'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateOrderStatusAction'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
    UpdateOrderStatusEvent:
      definition:
        StartAt: UpdateOrderStatusEventStart
        States:
          UpdateOrderStatusEventStart:
            End: true
            Resource: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.integrationName}-updateOrderStatusEvent'
            Retry: *ref_0
            Type: Task
      name: '${self:custom.integrationName}-updateOrderStatusEvent'
      role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:custom.commonResourceStage}-stepFunctionRole
